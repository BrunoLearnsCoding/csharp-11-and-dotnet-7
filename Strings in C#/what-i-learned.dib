#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

### Verbatem text ####

#!csharp

string text = @"c:\windows\system 32\";
Console.WriteLine(text);

#!markdown

### How raw string literal works ###

#!csharp

string text = """
                Hello world!
                Do you know me?
                """;
Console.WriteLine(text);

#!markdown

<span style="color:yellow">Note that compiler removes heading spaces according to the last line.<span>

#!csharp

int age = 45;
string text = $$"""
                {
                    <Person isAlive="true">
                        <Name value="Amber">
                    </Person> 
                }
                """;
Console.WriteLine(text);

#!csharp

string text = $"Hello \t {age}";
Console.WriteLine(text);

#!csharp

int binaryNotion = 0b_1000_0000_1_001;
Console.WriteLine(binaryNotion);

#!csharp

int i = 0;
double d = i/i;
if (Double.IsNaN(d)) {
    Console.WriteLine("NaN");
}

#!csharp

      // Define an array of Decimal values.
      Decimal[] values = { 1M, 100000000000000M, 10000000000000000000000000000M,
                           100000000000000.00000000000000M, 1.0000000000000000000000000000M,
                           123456789M, 0.123456789M, 0.000000000123456789M,
                           0.000000000000000000123456789M, 4294967295M,
                           18446744073709551615M, Decimal.MaxValue,
                           Decimal.MinValue, -7.9228162514264337593543950335M };

      Console.WriteLine("{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}",
                        "Argument", "Bits[3]", "Bits[2]", "Bits[1]",
                        "Bits[0]" );
      Console.WriteLine( "{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}",
                         "--------", "-------", "-------", "-------",
                         "-------" );

      // Iterate each element and display its binary representation
      foreach (var value in values) {
        int[] bits = decimal.GetBits(value);
        Console.WriteLine("{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}",
                          value, bits[3], bits[2], bits[1], bits[0]);
      }
   

// The example displays the following output:
//                           Argument     Bits[3]   Bits[2]   Bits[1]   Bits[0]
//                           --------     -------   -------   -------   -------
//                                  1    00000000  00000000  00000000  00000001
//                    100000000000000    00000000  00000000  00005AF3  107A4000
//      10000000000000000000000000000    00000000  204FCE5E  3E250261  10000000
//     100000000000000.00000000000000    000E0000  204FCE5E  3E250261  10000000
//     1.0000000000000000000000000000    001C0000  204FCE5E  3E250261  10000000
//                          123456789    00000000  00000000  00000000  075BCD15
//                        0.123456789    00090000  00000000  00000000  075BCD15
//               0.000000000123456789    00120000  00000000  00000000  075BCD15
//      0.000000000000000000123456789    001B0000  00000000  00000000  075BCD15
//                         4294967295    00000000  00000000  00000000  FFFFFFFF
//               18446744073709551615    00000000  00000000  FFFFFFFF  FFFFFFFF
//      79228162514264337593543950335    00000000  FFFFFFFF  FFFFFFFF  FFFFFFFF
//     -79228162514264337593543950335    80000000  FFFFFFFF  FFFFFFFF  FFFFFFFF
//    -7.9228162514264337593543950335    801C0000  FFFFFFFF  FFFFFFFF  FFFFFFFF

#!csharp

using System.Xml;

#!csharp

var doc = new XmlDocument();

XmlDocument doc2 = new();

#!csharp

Console.WriteLine(default(int));
Console.WriteLine(default(double));

decimal d = 55454855244.14M;
var bits = decimal.GetBits(d);
foreach (var bit in bits) {
    Console.WriteLine(Convert.ToString(bit,2));
}

#!markdown

# C# SDK Project file reference #

https://learn.microsoft.com/en-us/dotnet/core/project-sdk/overview

#!csharp

int x = 145;
Console.WriteLine($"Name of x: {nameof(x)} \nSize of x : {sizeof(int)} \nType of x : {typeof(int)}");

#!csharp

int a = 45;
Console.WriteLine($"{a} : {Convert.ToString(a,2)}");
int b = a << 1;
Console.WriteLine($"{b} : {Convert.ToString(b,2)}");

#!markdown

## Write a program in C# Sharp to print the first n natural numbers (staight forward and also backward) using recursion.

#!csharp

        /** <summery> 
        This method writes the n first natural numbers to the console using recursion. However the "from" argument is optional,
        it is necessary to be there as an argument. It is used as a counter and is written to the console. The "to" argument 
        is used as a limit for calling the method recursively.
        </summery> */

        public static void DisplayNaturalNumbersAscending(int to, int from = 1) 
        {
            if (from > to) return;
            Console.Write($"{from} ");
            DisplayNaturalNumbersAscending(to, from + 1);
        }

        /** <summery>
        This method writes the n first numbers to the console using recursion in descending order. The argument "a" is used as
        the counter and the recursion's limit too.
        </summery> */

        public static void DisplayNaturalNumbersDescending(int a)
        {
            if (a == 0) return;
            Console.Write($"{a} ");
            DisplayNaturalNumbersDescending(a - 1);
        }

#!csharp

/** <summery>
Test DisplayNaturalNumbersDescending and DisplayNaturalNumbersAscending methods.

</summery> */

DisplayNaturalNumbersAscending(from: 1, to: 20);
Console.WriteLine();
Console.WriteLine(new String('-',50));
DisplayNaturalNumbersDescending(20);

#!markdown

## How to document the code - Microsoft guide.

https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/

#!markdown

# Brancing #
## if statement ##

#!csharp

string Character = "Ninja";
if (Character == "Ninja") {
    Console.WriteLine("I got you Ninja");
}
else if (Character.ToString()[0] == 'N') {
    Console.WriteLine("You are someone with the first letter \"N\"");

}
else {
    Console.WriteLine("Fuck YOU!");

}

#!markdown

<span style="color:yellow"> Note: Just one of the branches (the uppermost one, which it's condition returns true) executes and the others will be ignored, even if the condition returns true. Hence, the oder matters when using if statement </span>

#!markdown

## Pattern matching using if statement ##

A feature introduced with C# 7.0 and later is pattern matching. The if statement can use the is keyword
in combination with declaring a local variable to make your code safer

#!csharp

object o = "3";
if (o is int i) {
    Console.WriteLine(i);
}
else {
    Console.WriteLine($"{o} is not defined as an integer. It's a {o.GetType()}");
}

#!markdown

When branching scalar values using if statement, consider that you can use the precedential nature of if statement to omit lower limits of ranges. In the example above, we have omitted lower limits : instead of (time > 10 and time < 20 ) -> (time < 20)

#!csharp

int time = 9;
if (time < 10) {
    Console.WriteLine("Good morning");
}
else if (time < 20) {
    Console.WriteLine("Good day");
}
else {
    Console.WriteLine("Good evening");
}

#!markdown

# Branching with switch statement #
The switch statement is different from the if statement because switch compares a single expression
against a list of multiple possible case statements. Every case statement is related to the single
expression. Every case section must end with:
<ul>
<li> The break keyword 
<li> Or the goto case keywords 
<li> Or they should have no statements 
<li> Or the goto keyword that references a named label 
<li> Or the return keyword to leave the current function 
</ul>

#!csharp

for (int i = 1; i < 100; i++) {
    int dice1 = Random.Shared.Next(1,7); // returns A 32-bit signed integer equal or greater than minValue and less than maxValue
    int dice2 = Random.Shared.Next(1,7);
    string message;
    switch (dice1, dice2) {
        case (6,6):             // evalutes any numnber of values. In this case, it means if both dice1 and dice2 have the value 6
            message = "Six Pair! How lucky you are";
            break;
        default: 
            message = "#";
            break;              // default case is evaluated always last whenever it is and NEEDS break 
        case var _ when (dice1 + dice2 == 7):   // var _ ignores case evaluation
            message = "Lucky 7!";
            break;
    };
    Console.Write($"{message} ");

}

#!markdown

# Branching with switch expression #
In C# 8.0 or later, you can simplify switch statements using switch expressions.

#!csharp

public enum GenderType {
    Male, Female
}
public class Animal {
    public string? Name {set; get;}
    public byte NumberOfLegs {set; get;}
    public byte Age {set; get;}
}

public class Memmal : Animal {
    public DateTime Born {get; set;}
    public GenderType Gender {get; set;}
}

public class Insect : Animal {
    public bool IsPoisonous {set; get;}
    public bool CanFly {set; get;}
}

public class Cat : Memmal {
    public bool IsDomestic {set; get;}
}

public class Fly : Insect {

}

#!csharp

Animal?[] animals = {
    new Cat {Name = "Paul", NumberOfLegs = 4, Gender = GenderType.Male, IsDomestic = true},
    null,
    new Fly {NumberOfLegs = 6, IsPoisonous = false}
};

foreach (var animal in animals) {
    string message = animal switch {
        Cat maleCat when maleCat.Gender == GenderType.Male => "This is a male cat",  // Checks if animal is of type Cat and assign it to maleCat variable
        Cat domesticCat when domesticCat.IsDomestic == true => "It's a domestic cat",
        _ => "Hallo ?"   // _ works as default case in switch staement
    };
};

#!csharp

string message = "Hallo";
string response = message switch  {
    "Hello" => "Hi",
    _ => "Good morning"


};
Console.WriteLine(response);

#!csharp

internal class Device {
    internal bool InNetworkAttachable {set; get;}
    internal string FQDN {get; set;}


}

internal class NetworkDevice : Device {
    internal string IPAddress {get; set;}
    internal string Ping() => $"You are pinging {this.IPAddress}";
}

Device[] devices = {
    new NetworkDevice() {FQDN = "ns1.postmeister.ir", IPAddress = "192.168.17.45"},
    new NetworkDevice() {FQDN = "ns2.postmeister.ir", IPAddress = "192.168.17.46"},
    new NetworkDevice() {FQDN = "mx01.postmeister.ir", IPAddress = "192.168.17.49"},

};

foreach (var device in devices) {
    switch (device) {
        case NetworkDevice ns when (ns.FQDN.ToLower().StartsWith("ns")) :
            Console.WriteLine(ns.Ping());
            break;
        case NetworkDevice mx when (mx.FQDN.ToLower().StartsWith("mx")) :
            Console.WriteLine(mx.Ping());
            break;
        default :
            Console.WriteLine("Nothing to say!");
            break;
    }

}

#!csharp

foreach(var device in devices) {

    message = device switch {
        NetworkDevice ns when ns.FQDN.ToLower().StartsWith("ns") => ns.FQDN + " is ready to resolve URLs!" ,
        _ => "I am not a Name Server!"
    };
    Console.WriteLine(message);
}

#!markdown

# Arrays #

#!markdown

### Multidimensional arrays ###

#!csharp

int[,] dimension = new[,] {
{4,2},
{8,9}
}; 
Console.WriteLine(dimension[1,1]);

#!markdown

if you omit new keyword, the compiler creates the array implicitly;

#!csharp

int[,] dim = {
{4,2},
{8,9}
}; 
Console.WriteLine(dim[1,1]);

#!csharp

for (int i = 0; i <= dim.GetUpperBound(0); i++) {             // GetUpperBound returns upper index of the array's dimension. 
    for (int j = 0; j <= dim.GetUpperBound(1); j++) {
        Console.WriteLine($"dim[{i},{j}] : {dim[i,j]}");
    }
}

#!csharp

int[,,] cube = {
    {
        {12, 13, 18, 68}, {45, 14, 78, 19}              // All arrays should be of the same size
    },
    {
        {97, 93, 98, 68}, {95, 94, 98, 99}
    },
    {
        {97, 93, 98, 68}, {95, 94, 98, 99}
    }
};

#!csharp

for (int i = 0; i <= cube.GetUpperBound(0); i++) {             // GetUpperBound returns upper index of the array's dimension. 
    for (int j = 0; j <= cube.GetUpperBound(1); j++) {
        for (int k = 0; k <= cube.GetUpperBound(2); k++) {
            Console.Write($"cube[{i},{j},{k}] : {cube[i,j,k]} \t");
        }
        Console.WriteLine();
    }
}

#!markdown

### Jagged arrays ###

If you need a multi-dimensional array but the number of items stored in each dimension is different,
then you can define an array of arrays, aka a jagged array

#!csharp

string[][] students = {
    new[] {"John", "Tim", "Mary"},
    new[] {"James","Harry","George","Anne"},
    new[] {"Elke","Hans","Reinhard","Junas","Ulm"},
};

#!csharp

for (int i = 0; i <= students.GetUpperBound(0); i++) {
    for (int j = 0; j <= students.GetUpperBound(0); j++) {          // Note the Inner & outer arrays have both just one dimension.
        Console.WriteLine(students[i][j]);
    }

}

#!csharp

char[] s = "mx1.postmeister.ir".ToLower().ToCharArray();
switch (s) {
    case [] : 
        Console.WriteLine("Empty server name");
        break;
    case ['n','s', ..] : 
        Console.WriteLine("Name Server found");
        break;
    case [.. char[] firstPart, 'i','r'] : 
        Console.WriteLine(".ir domain found");
        Console.WriteLine($"The first part is {new string(firstPart)}");
        break;
};

char[] name = {'C','o','b','r','a','n'};
Console.WriteLine(new string(name));            // How to create a string from an array of Chars using a string class's construnctor
string a;
a = "Hallo, Guten Tag!";

#!csharp

using static System.Convert;
using static System.Console;

int i;
long l = 1400;

// i = (int)l;
i = ToInt32(l);
WriteLine(i);

#!markdown

## Comparing two characters ##
We can compare characters using == and != operators and .Equals method. 

#!csharp

char c1 = 'Q';
char c2 = 'q';
Console.WriteLine(c1 == c2);
Console.WriteLine(c1.Equals(c2));

#!csharp

Console.WriteLine($"true | true : {true | true}");
Console.WriteLine($"false | flase : {false | false}");
Console.WriteLine($"true | flase : {true | false}");
Console.WriteLine($"false | true : {false | true}");

#!csharp

Console.WriteLine($"true & true : {true & true}");
Console.WriteLine($"false & flase : {false & false}");
Console.WriteLine($"true & flase : {true & false}");
Console.WriteLine($"false & true : {false & true}");

#!csharp

int number = 14;
string raw = """
                How dare you man? 
                Isn't that real? I dont believe you.
                "{number}"
                """;
// The Compiler removes the same whitespaces as the closing line of the raw string literal from all the lines. 
// Hence all the lines should have at least the same whitespace as the last line of raw literal string(""").
// if you try to have a line with less leading whitespace as the last line you get the follwing compiler error:
// Line does not start with the same whitespace as the closing line of the raw string literal.

string rawWithDoubleQuotes = """"
                        Should we have this """THE QUICK""" in text?

                    """";
// To escape """ in raw string literal, you should use """" as openning and closing marks. The more sequencing double quotes you need
// in the raw string literal, the more double quotes you need as openning and closing marks. 

Console.WriteLine(raw);
Console.WriteLine(rawWithDoubleQuotes);

#!csharp

internal class Person {
    internal string Name {get; set;}
    internal string Family {get; set;}
    internal DateTime Birthday {get; set;}
    internal int Age {get;}
}

Person[] people = {
    new() {Name = "Termeh", Family="Taj Ahamdi", Birthday = new(2014,03,21)},
    new() {Name = "Mahnaz", Family="Mokhtari", Birthday= new(1979,6,21)}
};

foreach (var person in People) {
    Console.WriteLine($"{person.Name,30}");


}

#!csharp

// TODO: Document what you learned 
// about string literals and how the compiler interpretes string escape sequences


// How are sequencing braces interpreted  in an interpolated string in c#?
// In interpolated strings, every brace escapes the next brace and produces ONE brace in the result and when 
// the number of sequencing braces is EVEN, there remains no brace to be interpreted as an identifier for an interpolated value.

// There are 8 braces in this string literal
string interpolatedWithEvenBraces = $"Her age \n is {{{{{{{{age}}}}}}}} \U0001F47D ";

// There are 7 braces in this string literal
string interpolatedWithOddBraces = $"Her age \n is {{{{{{{age}}}}}}} \U0001F47D ";

Console.WriteLine(interpolatedWithEvenBraces);
Console.WriteLine(interpolatedWithOddBraces);

// How are sequencing braces interpreted in an interpolated verbatim string literal in c#?
// 

int age = 44;
string raw = $$$$""""
            <Person gender="""Male""">
                <FirstName value="Mahnaz" />
                <LastName value="Mokhtari" />
                <BirthDate value="{{{{{{{age}}}}}}}" />
            </Person>
            """";
Console.WriteLine(raw);
